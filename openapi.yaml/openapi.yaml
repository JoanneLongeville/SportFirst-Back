openapi: 3.0.0
info:
  title: SportFirst API
  version: 1.0.0
servers:
  - url: https://api.sportfirst.com/v1

paths:
  /users:
    post:
      summary: Create a new user
      description: Creates a new user with the provided information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created
        400:
          description: Bad request (e.g., invalid input data)
        409:
          description: Conflict (e.g., user already exists)
        500:
          description: Internal Server Error

  /users/login:
    post:
      summary: User login
      description: Authenticates a user by their credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Login successful
        400:
          description: Bad request (e.g., missing fields or invalid format)
        401:
          description: Unauthorized (e.g., incorrect credentials)
        500:
          description: Internal Server Error

  /users/logout:
    post:
      summary: User logout
      description: Logs out the current user session.
      responses:
        200:
          description: Logout successful
        401:
          description: Unauthorized or no active session

  /users/{userId}:
    get:
      summary: Retrieve user information
      description: Retrieves details of a specific user by their ID.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Unique user ID
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found

    put:
      summary: Update user information
      description: Updates an existing user with the provided information.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Unique user ID
      responses:
        200:
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request (e.g., invalid input data)
        404:
          description: User not found
        500:
          description: Internal Server Error

    delete:
      summary: Delete a user
      description: Deletes a specific user by their ID.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Unique user ID
      responses:
        200:
          description: User deleted
        400:
          description: Bad request
        404:
          description: User not found
        500:
          description: Internal Server Error

  /sessions:
    post:
      summary: Create a new session
      description: Creates a new session with the provided information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        201:
          description: Session created
        400:
          description: Bad request (e.g., invalid input data)
        500:
          description: Internal Server Error

  /sessions/{sessionId}:
    get:
      summary: Retrieve session information
      description: Retrieves details of a specific session by its ID.
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: Unique session ID
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        404:
          description: Session not found

    put:
      summary: Update session information
      description: Updates an existing session with the provided information.
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: Unique session ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        200:
          description: Session updated
        400:
          description: Bad request
        404:
          description: Session not found
        500:
          description: Internal Server Error

    delete:
      summary: Delete a session
      description: Deletes a specific session by its ID.
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: Unique session ID
      responses:
        200:
          description: Session deleted
        404:
          description: Session not found
        500:
          description: Internal Server Error

  /availabilities:
    post:
      summary: Create a new availability
      description: Adds a new availability record.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Availability'
      responses:
        201:
          description: Availability created
        400:
          description: Bad request
        500:
          description: Internal Server Error

  /availabilities/{availabilityId}:
    get:
      summary: Retrieve availability information
      description: Retrieves details of a specific availability by its ID.
      parameters:
        - name: availabilityId
          in: path
          required: true
          schema:
            type: string
          description: Unique availability ID
      responses:
        200:
          description: Successful operation
        404:
          description: Availability not found

    put:
      summary: Update availability information
      description: Updates an existing availability record.
      parameters:
        - name: availabilityId
          in: path
          required: true
          schema:
            type: string
          description: Unique availability ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Availability'
      responses:
        200:
          description: Availability updated
        400:
          description: Bad request
        404:
          description: Availability not found
        500:
          description: Internal Server Error

    delete:
      summary: Delete an availability
      description: Deletes a specific availability record by its ID.
      parameters:
        - name: availabilityId
          in: path
          required: true
          schema:
            type: string
          description: Unique availability ID
      responses:
        200:
          description: Availability deleted
        404:
          description: Availability not found
        500:
          description: Internal Server Error

  /comments:
    post:
      summary: Create a new comment
      description: Adds a new comment record.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        201:
          description: Comment created
        400:
          description: Bad request
        500:
          description: Internal Server Error

  /comments/{commentId}:
    get:
      summary: Retrieve comment information
      description: Retrieves details of a specific comment by its ID.
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
          description: Unique comment ID
      responses:
        200:
          description: Successful operation
        404:
          description: Comment not found

    put:
      summary: Update comment information
      description: Updates an existing comment record.
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
          description: Unique comment ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        200:
          description: Comment updated
        400:
          description: Bad request
        404:
          description: Comment not found
        500:
          description: Internal Server Error

    delete:
      summary: Delete a comment
      description: Deletes a specific comment record by its ID.
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
          description: Unique comment ID
      responses:
        200:
          description: Comment deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        404:
          description: Comment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

components:
  schemas:
    User:
      type: object
      required:
        - client_id
        - name
        - lastname
        - gender
        - date_of_birth
        - address
        - email
        - password
        - phone
        - role
      properties:
        client_id:
          type: string
        name:
          type: string
        lastname:
          type: string
        gender:
          type: string
        date_of_birth:
          type: string
          format: date
        address:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        phone:
          type: string
        role:
          type: string
          enum:
            - admin
            - user

    Session:
      type: object
      required:
        - sessionId
        - clientId
        - dateRdv
        - timeSlot
        - status
      properties:
        sessionId:
          type: string
        clientId:
          type: string
        dateRdv:
          type: string
          format: date
        timeSlot:
          type: string
        status:
          type: string
          enum:
            - scheduled
            - completed
            - cancelled

    Availability:
      type: object
      required:
        - availabilityId
        - date
        - timeSlot
        - status
      properties:
        availabilityId:
          type: string
        date:
          type: string
          format: date
        timeSlot:
          type: string
        status:
          type: string
          enum:
            - available
            - unavailable

    Comment:
      type: object
      required:
        - commentId
        - sessionId
        - clientId
        - content
        - commentDate
      properties:
        commentId:
          type: string
        sessionId:
          type: string
        clientId:
          type: string
        content:
          type: string
        commentDate:
          type: string
          format: date